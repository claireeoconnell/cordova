<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Genes_model extends MY_Model {
	/**
	 * Holds an array of tables used.
	 *
	 * @var array
	 */
  public $tables = array();

	public function __construct() {
		parent::__construct();
    $this->load->config('variation_database');

		//initialize db tables data
		$this->tables = $this->config->item('tables');
	}

  /**
   * Get Genes
   *
   * Get a list of all genes in the variation database.
   * A first letter may be provided to only get the
   * genes that start with that letter.
   *
   * @author Sean Ephraim
   * @access public
   * @param string $f_letter
   *    First letter of the gene
   * @param boolean $include_queue_genes
   *    Include/exclude the genes that are only in the queue
   * @param string $table
   *    Table from which to retrieve genes
   * @return array Gene names
   */
  public function get_genes($f_letter = NULL, $include_queue_genes = TRUE, $table = NULL) {
    // Only get genes of a certain letter
    if ($f_letter) {
      $this->db->like('gene', $f_letter, 'after');
    }

    if ($table === NULL) {
      $table = $this->tables['variant_count'];
    }

    $query = $this->db->distinct()
                      ->select('gene')
                      ->get($table);

    // Build array of gene names from result
    $genes = array();
    foreach ($query->result() as $row) {
      if ( ! empty($row->gene)) {
        $genes[] = $row->gene;
      }
    }

    if ($include_queue_genes) {
      // Include genes in the queue as well
      if ($f_letter) {
        $this->db->like('gene', $f_letter, 'after');
      }
      $query = $this->db->distinct()
                        ->select('gene')
                        ->get($this->tables['vd_queue']);
  
      foreach ($query->result() as $row) {
        if ( ! empty($row->gene)) {
          $genes[] = $row->gene;
        }
      }
    }

    $genes = array_unique($genes);
    sort($genes);
    return $genes;
  }

  /**
   * Create a formatted table of variants for a list of genes
   *
   * @author Nikhil Anand
   * @author Sean Ephraim
   * @author Zachary Ladlie
   * @access public
   * @param array $genes
   *   A list of genes
   * @return void
   */
  public function format_genes_list($genes) {
    // TODO Show the table opened if we have only one result
    $display   = "display:none;";
    $collapsed = "";
//    if (sizeof($genes) == 1) {
//      $display = "";
//      $collapsed = "collapsed";
//    }
    
    $genes_list = '';

    foreach ($genes as $gene) {
      // Build CSV, Tab-delimited, JSON and XML links
      $uri_str = site_url("api?type=gene&amp;terms=$gene&amp;format=");
      $uri_csv = $uri_str  . 'csv';
      $uri_tab = $uri_str  . 'tab';
      $uri_jsn = $uri_str  . 'json';
      $uri_xml = $uri_str  . 'xml';
        
      // Fieldset containing gene name and table header
      $genes_list .=<<<EOF
      \n
      <fieldset>
          <legend class="genename $collapsed" id="$gene"><strong>$gene</strong> <span><a href="$uri_csv">CSV</a> <a href="$uri_tab">Tab</a> <a href="$uri_jsn">JSON</a> <a href="$uri_xml">XML</a></span></legend>
          <div id="table-$gene" class="variant-list-container" style="$display">
          </div>
      </fieldset>
EOF;
    }
    
    return $genes_list;
  }
}

/* End of file genes_model.php */
/* Location: ./application/models/genes_model.php */

